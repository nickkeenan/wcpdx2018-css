/* =Custom mixins
===================================================== */

// Clearfix
//
// Markup:
// @include clearfix();
//
// Style guide: 2.clearfix

// Clearfix (IE8+)
@mixin clearfix() {
  &:before,
  &:after {
    content: '';
    display: table;
  }
  &:after {
    clear: both;
  }
  *zoom: 1;
}


// Media queries

// Media query mixin
// dependency: grid.scss
@mixin mq-small {
  @media only screen and (min-width: $screen-sm-min) {
    @content;
  }
}

@mixin mq-medium {
  @media only screen and (min-width: $screen-md-min) {
    @content;
  }
}

@mixin mq-large {
  @media only screen and (min-width: $screen-lg-min) {
    @content;
  }
}

@mixin mq-tiny-max {
  @media only screen and (max-width: $screen-xs-max) {
    @content;
  }
}

@mixin mq-small-max {
  @media only screen and (max-width: $screen-sm-max) {
    @content;
  }
}

@mixin mq-medium-max {
  @media only screen and (max-width: $screen-md-max) {
    @content;
  }
}


// Visually Hidden
//
// Hides element visually but keeps it visible for screen readers.
// More information http://webaim.org/techniques/css/invisiblecontent/
//
// Markup:
// @include visually-hidden;
//
// Style guide: 2.visually-hidden

@mixin visually-hidden {
  position: absolute;
  left: -10000px;
  top: auto;
  width: 1px;
  height: 1px;
  overflow: hidden;
}


// Visually Visible
//
// Resets visually hidden element.
//
// Markup:
// @include visually-visible;
//
// Style guide: 2.visually-visible

@mixin visually-visible {
  position: relative;
  left: auto;
  width: auto;
  height: auto;
  overflow: visible;
}


// Bootstrap Responsive utilities
// [converter] $parent hack
@mixin responsive-visibility($parent) {
  #{$parent} {
    display: block !important;
  }
  table#{$parent}  { display: table !important; }
  tr#{$parent}     { display: table-row !important; }
  th#{$parent},
  td#{$parent}     { display: table-cell !important; }
}

// [converter] $parent hack
@mixin responsive-invisibility($parent) {
  #{$parent} {
    display: none !important;
  }
}



// ********** Responsive ********** //

// responsive image helper
.img-responsive {
  max-width: 100%;
}

// embed/video responsive helper
.embed-responsive {
  position: relative;
  display: block;
  height: 0;
  padding: 0;
  overflow: hidden;
  .embed-responsive-item,
  iframe,
  embed,
  object,
  video {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    height: 100%;
    width: 100%;
    border: 0;
  }
} // .embed-responsive

.embed-responsive-16by9 {
  padding-bottom: 56.25%;
} // .embed-responsive-16by9

.embed-responsive-4by3 {
  padding-bottom: 75%;
} // .embed-responsive-4by3

.embed-responsive-full {
  padding-bottom: 100%;
} // .embed-responsive-full

// Visibility utilities
@include responsive-invisibility('.visible-xs');
@include responsive-invisibility('.visible-sm');
@include responsive-invisibility('.visible-md');
@include responsive-invisibility('.visible-lg');

// visible for screen readers only
.sr-only, .screen-reader-text {
  position: absolute;
  clip: rect(0,0,0,0);
	border: 0;
}

.hidden, .hide {
  display: none;
}

.show {
  display: block;
}

.invisible {
  visibility: hidden;
}

.visible-xs-block,
.visible-xs-inline,
.visible-xs-inline-block,
.visible-sm-block,
.visible-sm-inline,
.visible-sm-inline-block,
.visible-md-block,
.visible-md-inline,
.visible-md-inline-block,
.visible-lg-block,
.visible-lg-inline,
.visible-lg-inline-block {
  display: none !important;
}

@media (max-width: $screen-xs-max) {
  @include responsive-visibility('.visible-xs');
}
.visible-xs-block {
  @media (max-width: $screen-xs-max) {
    display: block !important;
  }
}
.visible-xs-inline {
  @media (max-width: $screen-xs-max) {
    display: inline !important;
  }
}
.visible-xs-inline-block {
  @media (max-width: $screen-xs-max) {
    display: inline-block !important;
  }
}

@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
  @include responsive-visibility('.visible-sm');
}
.visible-sm-block {
  @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
    display: block !important;
  }
}
.visible-sm-inline {
  @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
    display: inline !important;
  }
}
.visible-sm-inline-block {
  @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
    display: inline-block !important;
  }
}

@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
  @include responsive-visibility('.visible-md');
}
.visible-md-block {
  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
    display: block !important;
  }
}
.visible-md-inline {
  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
    display: inline !important;
  }
}
.visible-md-inline-block {
  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
    display: inline-block !important;
  }
}

@media (min-width: $screen-lg-min) {
  @include responsive-visibility('.visible-lg');
}
.visible-lg-block {
  @media (min-width: $screen-lg-min) {
    display: block !important;
  }
}
.visible-lg-inline {
  @media (min-width: $screen-lg-min) {
    display: inline !important;
  }
}
.visible-lg-inline-block {
  @media (min-width: $screen-lg-min) {
    display: inline-block !important;
  }
}

@media (max-width: $screen-xs-max) {
  @include responsive-invisibility('.hidden-xs');
}

@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
  @include responsive-invisibility('.hidden-sm');
}

@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
  @include responsive-invisibility('.hidden-md');
}

@media (min-width: $screen-lg-min) {
  @include responsive-invisibility('.hidden-lg');
}

@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

.clearfix {
  @include clearfix;
}


// Hide text
//
// Moves text off screen for background image purposes.
//
// Markup:
// @include hide-text;
//
// Style guide: 2.hide-text

@mixin hide-text {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}


// Show text
//
// Resets hide-text mixin.
//
// Markup:
// @include show-text;
//
// Style guide: 2.show-text

@mixin show-text {
  text-indent: 0;
  white-space: normal;
  overflow: visible;
}

// Word wrap
@mixin word-wrap() {
  word-break:     break-word;
  -webkit-hyphens: auto;
  -moz-hyphens:    auto;
  hyphens:         auto;
}


// Ellipsis
@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}


// Rem to px conversion
@mixin font-size($sizeValue: 16) {
  font-size: $sizeValue + px;
  font-size: ($sizeValue / 16) + rem;
}

// List reset
//
// Resets basic list styles (margin, padding etc.).
//
// Markup:
// @include list-reset;
//
// Style guide: 2.list-reset

// List reset
@mixin list-reset {
  list-style: none;
  margin: 0;
  padding: 0;
}


// Transition fast
//
// Uniform fast transition
//
// Markup:
// @include transition-fast;
//
// Style guide: 2.transition-fast

@mixin transition-fast {
  transition: all .15s ease;
}


// Transition normal
//
// Uniform normal transition
//
// Markup:
// @include transition-normal;
//
// Style guide: 2.transition-normal

@mixin transition-normal {
  transition: all .3s ease;
}


// Transition slow
//
// Uniform slow transition
//
// Markup:
// @include transition-slow;
//
// Style guide: 2.transition-slow

@mixin transition-slow {
  transition: all .45s ease;
}


// Container padding
//
// Add container padding accross resolutions with the ability to set multiplicator for top and bottom padding.
//
// Markup:
// @include container-padding(1.5);
//
// Style guide: 2.container-padding

@mixin container-padding($proportion) {

  padding: ($container-unit-small * $proportion) $container-unit-small;

  @include breakpoint(small) {

    padding: ($container-unit-medium * $proportion) $container-unit-medium;

  }

  @include breakpoint(medium) {

    padding: ($container-unit-large * $proportion) $container-unit-large;

  }

}
